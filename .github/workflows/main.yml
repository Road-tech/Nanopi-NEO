name: Build Armbian

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_board:
        description: "Select Board."
        required: false
        default: "nanopineo"
        type: choice
        options:
          - nanopineo
          - nanopineo2

env:
  #UPLOAD_IMAGE: true
  OUTPUT_DIR: /tmp/images
  IMAGE_FILENAME: ${{ inputs.set_board }}_image
  CUSTOMIZATIOM_SCRIPT: userpatches/customize-image.sh
  OTG_PATCH: userpatches/kernel/archive/sunxi-6.6/fix-nanopiduo2-otg-serial.patch
  #KERNEL_CONFIG: config
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo apt install -y qemu-user-static

    - name: Download source code
      run: |
        git clone --depth=1 --branch=main https://github.com/armbian/build
        #git clone --depth=1 --branch=main https://github.com/Road-tech/armbian-build.git build
        
    - name: Parepre Armbian Env
      run: |
        cd build && mkdir -p userpatches/kernel/archive/sunxi-6.6
        [ -e $OTG_PATCH ] && mv -f $GITHUB_WORKSPACE/$OTG_PATCH userpatches/kernel/archive/sunxi-6.6/
        cd userpatches/kernel/archive/sunxi-6.6 && ls && cd -
        cat $OTG_PATCH
        ./compile.sh build BOARD=${{ inputs.set_board }} BRANCH=legacy BUILD_MINIMAL=no KERNEL_CONFIGURE=no RELEASE=jammy
   
    - name: Add customize-image.sh
      id: build
      run: |
        mkdir -p "${OUTPUT_DIR}"
        cd build
        # echo "cp userpatches/customize-image.sh and compile"
        #[ -e $CUSTOMIZATIOM_SCRIPT ] && mv -f $GITHUB_WORKSPACE/$CUSTOMIZATIOM_SCRIPT userpatches/customize-image.sh
        #./compile.sh build BOARD=${{ inputs.set_board }} BRANCH=current BUILD_MINIMAL=no KERNEL_CONFIGURE=no RELEASE=jammy BUILD_DESKTOP=no
        cd  output/images
        tar -Jcvf "${OUTPUT_DIR}/${IMAGE_FILENAME}.tar.xz"  *.img    
        #tar -vczf /tmp/nanopi_neo_image.tar.gz *.img  
        echo "::set-output name=status::success"

    - name: Upload Armbian image
      uses: actions/upload-artifact@master
      if: steps.build.outputs.status == 'success'
      with:
        name: ${{ inputs.set_board }}
        path: ${{ env.OUTPUT_DIR }}/${{env.IMAGE_FILENAME}}*.tar.xz
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        echo "::set-output name=status::success"
      
    - name: Upload image to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ env.IMAGE_FILENAME }}-${{ steps.tag.outputs.release_tag }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: ${{ env.OUTPUT_DIR }}/*.tar.xz
